// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.9.1
// source: filestore-svc.proto

package proto_gen

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FilestoreClient is the client API for Filestore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FilestoreClient interface {
	GetHealth(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Health, error)
	GetUploadUrl(ctx context.Context, in *FileDto, opts ...grpc.CallOption) (*FileDto, error)
	GetImageUrl(ctx context.Context, in *FileDto, opts ...grpc.CallOption) (*FileDto, error)
}

type filestoreClient struct {
	cc grpc.ClientConnInterface
}

func NewFilestoreClient(cc grpc.ClientConnInterface) FilestoreClient {
	return &filestoreClient{cc}
}

func (c *filestoreClient) GetHealth(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Health, error) {
	out := new(Health)
	err := c.cc.Invoke(ctx, "/filestoreSvc.Filestore/GetHealth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filestoreClient) GetUploadUrl(ctx context.Context, in *FileDto, opts ...grpc.CallOption) (*FileDto, error) {
	out := new(FileDto)
	err := c.cc.Invoke(ctx, "/filestoreSvc.Filestore/GetUploadUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filestoreClient) GetImageUrl(ctx context.Context, in *FileDto, opts ...grpc.CallOption) (*FileDto, error) {
	out := new(FileDto)
	err := c.cc.Invoke(ctx, "/filestoreSvc.Filestore/GetImageUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FilestoreServer is the server API for Filestore service.
// All implementations must embed UnimplementedFilestoreServer
// for forward compatibility
type FilestoreServer interface {
	GetHealth(context.Context, *empty.Empty) (*Health, error)
	GetUploadUrl(context.Context, *FileDto) (*FileDto, error)
	GetImageUrl(context.Context, *FileDto) (*FileDto, error)
	mustEmbedUnimplementedFilestoreServer()
}

// UnimplementedFilestoreServer must be embedded to have forward compatible implementations.
type UnimplementedFilestoreServer struct {
}

func (UnimplementedFilestoreServer) GetHealth(context.Context, *empty.Empty) (*Health, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHealth not implemented")
}
func (UnimplementedFilestoreServer) GetUploadUrl(context.Context, *FileDto) (*FileDto, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUploadUrl not implemented")
}
func (UnimplementedFilestoreServer) GetImageUrl(context.Context, *FileDto) (*FileDto, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImageUrl not implemented")
}
func (UnimplementedFilestoreServer) mustEmbedUnimplementedFilestoreServer() {}

// UnsafeFilestoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FilestoreServer will
// result in compilation errors.
type UnsafeFilestoreServer interface {
	mustEmbedUnimplementedFilestoreServer()
}

func RegisterFilestoreServer(s grpc.ServiceRegistrar, srv FilestoreServer) {
	s.RegisterService(&Filestore_ServiceDesc, srv)
}

func _Filestore_GetHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilestoreServer).GetHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filestoreSvc.Filestore/GetHealth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilestoreServer).GetHealth(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Filestore_GetUploadUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileDto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilestoreServer).GetUploadUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filestoreSvc.Filestore/GetUploadUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilestoreServer).GetUploadUrl(ctx, req.(*FileDto))
	}
	return interceptor(ctx, in, info, handler)
}

func _Filestore_GetImageUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileDto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilestoreServer).GetImageUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filestoreSvc.Filestore/GetImageUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilestoreServer).GetImageUrl(ctx, req.(*FileDto))
	}
	return interceptor(ctx, in, info, handler)
}

// Filestore_ServiceDesc is the grpc.ServiceDesc for Filestore service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Filestore_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "filestoreSvc.Filestore",
	HandlerType: (*FilestoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHealth",
			Handler:    _Filestore_GetHealth_Handler,
		},
		{
			MethodName: "GetUploadUrl",
			Handler:    _Filestore_GetUploadUrl_Handler,
		},
		{
			MethodName: "GetImageUrl",
			Handler:    _Filestore_GetImageUrl_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "filestore-svc.proto",
}

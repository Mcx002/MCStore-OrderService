// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.9.1
// source: cart-svc.proto

package proto_gen

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CartClient is the client API for Cart service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CartClient interface {
	GetHealth(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Health, error)
	AddCartItem(ctx context.Context, in *CartDto, opts ...grpc.CallOption) (*CartDto, error)
	UpdateCartItem(ctx context.Context, in *CartDto, opts ...grpc.CallOption) (*CartDto, error)
	DeleteCartItem(ctx context.Context, in *CartDto, opts ...grpc.CallOption) (*wrappers.BoolValue, error)
	ListCartItem(ctx context.Context, in *ListOptions, opts ...grpc.CallOption) (*ListCartDto, error)
}

type cartClient struct {
	cc grpc.ClientConnInterface
}

func NewCartClient(cc grpc.ClientConnInterface) CartClient {
	return &cartClient{cc}
}

func (c *cartClient) GetHealth(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Health, error) {
	out := new(Health)
	err := c.cc.Invoke(ctx, "/cartSvc.Cart/GetHealth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartClient) AddCartItem(ctx context.Context, in *CartDto, opts ...grpc.CallOption) (*CartDto, error) {
	out := new(CartDto)
	err := c.cc.Invoke(ctx, "/cartSvc.Cart/AddCartItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartClient) UpdateCartItem(ctx context.Context, in *CartDto, opts ...grpc.CallOption) (*CartDto, error) {
	out := new(CartDto)
	err := c.cc.Invoke(ctx, "/cartSvc.Cart/UpdateCartItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartClient) DeleteCartItem(ctx context.Context, in *CartDto, opts ...grpc.CallOption) (*wrappers.BoolValue, error) {
	out := new(wrappers.BoolValue)
	err := c.cc.Invoke(ctx, "/cartSvc.Cart/DeleteCartItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartClient) ListCartItem(ctx context.Context, in *ListOptions, opts ...grpc.CallOption) (*ListCartDto, error) {
	out := new(ListCartDto)
	err := c.cc.Invoke(ctx, "/cartSvc.Cart/ListCartItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CartServer is the server API for Cart service.
// All implementations must embed UnimplementedCartServer
// for forward compatibility
type CartServer interface {
	GetHealth(context.Context, *empty.Empty) (*Health, error)
	AddCartItem(context.Context, *CartDto) (*CartDto, error)
	UpdateCartItem(context.Context, *CartDto) (*CartDto, error)
	DeleteCartItem(context.Context, *CartDto) (*wrappers.BoolValue, error)
	ListCartItem(context.Context, *ListOptions) (*ListCartDto, error)
	mustEmbedUnimplementedCartServer()
}

// UnimplementedCartServer must be embedded to have forward compatible implementations.
type UnimplementedCartServer struct {
}

func (UnimplementedCartServer) GetHealth(context.Context, *empty.Empty) (*Health, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHealth not implemented")
}
func (UnimplementedCartServer) AddCartItem(context.Context, *CartDto) (*CartDto, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCartItem not implemented")
}
func (UnimplementedCartServer) UpdateCartItem(context.Context, *CartDto) (*CartDto, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCartItem not implemented")
}
func (UnimplementedCartServer) DeleteCartItem(context.Context, *CartDto) (*wrappers.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCartItem not implemented")
}
func (UnimplementedCartServer) ListCartItem(context.Context, *ListOptions) (*ListCartDto, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCartItem not implemented")
}
func (UnimplementedCartServer) mustEmbedUnimplementedCartServer() {}

// UnsafeCartServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CartServer will
// result in compilation errors.
type UnsafeCartServer interface {
	mustEmbedUnimplementedCartServer()
}

func RegisterCartServer(s grpc.ServiceRegistrar, srv CartServer) {
	s.RegisterService(&Cart_ServiceDesc, srv)
}

func _Cart_GetHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServer).GetHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cartSvc.Cart/GetHealth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServer).GetHealth(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cart_AddCartItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CartDto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServer).AddCartItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cartSvc.Cart/AddCartItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServer).AddCartItem(ctx, req.(*CartDto))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cart_UpdateCartItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CartDto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServer).UpdateCartItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cartSvc.Cart/UpdateCartItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServer).UpdateCartItem(ctx, req.(*CartDto))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cart_DeleteCartItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CartDto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServer).DeleteCartItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cartSvc.Cart/DeleteCartItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServer).DeleteCartItem(ctx, req.(*CartDto))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cart_ListCartItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServer).ListCartItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cartSvc.Cart/ListCartItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServer).ListCartItem(ctx, req.(*ListOptions))
	}
	return interceptor(ctx, in, info, handler)
}

// Cart_ServiceDesc is the grpc.ServiceDesc for Cart service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Cart_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cartSvc.Cart",
	HandlerType: (*CartServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHealth",
			Handler:    _Cart_GetHealth_Handler,
		},
		{
			MethodName: "AddCartItem",
			Handler:    _Cart_AddCartItem_Handler,
		},
		{
			MethodName: "UpdateCartItem",
			Handler:    _Cart_UpdateCartItem_Handler,
		},
		{
			MethodName: "DeleteCartItem",
			Handler:    _Cart_DeleteCartItem_Handler,
		},
		{
			MethodName: "ListCartItem",
			Handler:    _Cart_ListCartItem_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cart-svc.proto",
}
